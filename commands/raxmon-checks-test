#!/usr/bin/env python
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

try:
    import simplejson as json
except ImportError:
    import json

from raxmon_cli.common import run_action
from raxmon_cli.utils import str_to_dict, str_to_list

OPTIONS = [
    [['--entity-id'], {'dest': 'entity_id', 'help': 'Parent Entity ID'}],
    [['--type'], {'dest': 'type', 'help': 'Check type'}],
    [['--details'], {'dest': 'details', 'help': 'Check details'}],
    [['--timeout'], {'dest': 'timeout', 'help': 'Check timeout'}],
    [['--period'], {'dest': 'period', 'help': 'Check period'}],
    [['--monitoring-zones'], {'dest': 'monitoring_zones', 'help': 'A list of monitoring zones'}],
    [['--target-alias'], {'dest': 'target_alias', 'help': 'Target alias'}],
    [['--target-hostname'], {'dest': 'target_hostname', 'help': 'Target hostname'}],
    [['--target-resolver'], {'dest': 'target_resolver', 'help': 'Target resolver'}],
    [['--json'], {'dest': 'json', 'action': 'store_true', 'help': 'Convert response to JSON'}]
]

REQUIRED_OPTIONS = ['entity_id', 'type']

def callback(driver, options, args, callback):
    options.monitoring_zones = str_to_list(options.monitoring_zones)
    options.details = str_to_dict(options.details)
    en = driver.get_entity(entity_id=options.entity_id)
    result = driver.test_check(timeout=options.timeout,
                               period=options.period, entity=en,
                               monitoring_zones=options.monitoring_zones,
                               target_alias=options.target_alias,
                               target_hostname=options.target_hostname,
                               target_resolver=options.target_resolver,
                               type=options.type,
                               details=options.details)

    if options.json:
        result = json.dumps(result)

    print(result)

run_action(OPTIONS, REQUIRED_OPTIONS, 'checks', 'cteate', callback)
